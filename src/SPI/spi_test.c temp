/**
  ******************************************************************************
  * @file    stm32f4xx_ll_spi.c
  * @author  MCD Application Team
  * @brief   SPI LL module driver.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */


static void MX_SPI1_Init(void);
extern SPI_HandleTypeDef hspi1;  // use SPI handle created to init the SPI module
//void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi);  // GPIO init of SPI pins
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,uint32_t Timeout);

void spi_test(void) {
  
  RCC->APB2ENR |= (uint32_t)(1 << 12);  // Bit 12 enables SPI1 clock
  MX_SPI1_Init();                       // init SPI module
  HAL_SPI_MspInit(hspi1);               // setup the SPI pins
  HAL_Delay(5);                         // let things settle down
  char xmit_buff[] = "  Hello World!\n";
  char rcv_buff[64];
  uint16_t length = len(xmit_buff);
  while (1) {
    HAL_SPI_TransmitReceive(hspi1, xmit_buff, rcv_buff, length,50);
    xmit_buff[0] = (uint8_t)((HAL_GetTick() % 10) + '0');
    HAL_Delay(250);
  }
}


/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void SPI1_Init(uint32_t prescaler)
{


// SPI_BAUDRATEPRESCALER_2      24MHz
// SPI_BAUDRATEPRESCALER_4      12MHz
// SPI_BAUDRATEPRESCALER_8       6MHz
// SPI_BAUDRATEPRESCALER_16      3MHz
// SPI_BAUDRATEPRESCALER_32      1.5MHz
// SPI_BAUDRATEPRESCALER_64      0.75MHz
// SPI_BAUDRATEPRESCALER_128     0.375MHz
// SPI_BAUDRATEPRESCALER_256     0.1875MHz
  
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
  hspi1.Init.BaudRatePrescaler = prescaler;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler_Boot();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}


#define CS_LOW() 
#define CS_HIGH()

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
